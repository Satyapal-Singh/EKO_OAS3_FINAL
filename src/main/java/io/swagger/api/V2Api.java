/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InlineResponse20012;
import io.swagger.model.InlineResponse20013;
import io.swagger.model.InlineResponse20014;
import io.swagger.model.InlineResponse20015;
import io.swagger.model.InlineResponse20016;
import io.swagger.model.InlineResponse20017;
import io.swagger.model.InlineResponse20018;
import io.swagger.model.InlineResponse20019;
import io.swagger.model.InlineResponse20020;
import io.swagger.model.InlineResponse20021;
import io.swagger.model.InlineResponse20022;
import io.swagger.model.InlineResponse20023;
import io.swagger.model.InlineResponse20024;
import io.swagger.model.InlineResponse20025;
import io.swagger.model.InlineResponse20026;
import io.swagger.model.InlineResponse20034;
import io.swagger.model.InlineResponse20035;
import org.springframework.core.io.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-07-03T14:36:23.648Z[GMT]")
@Validated
public interface V2Api {

    @Operation(summary = "AePS Transaction API", description = "This is an example operation to show how fund transfers can be initiated", tags={ "AEPS APIs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/aeps",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Object> v2AepsPost(@NotNull @Parameter(in = ParameterIn.QUERY, description = "2-Cash;3-Balance;4-Stat" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "service_type", required = true) Integer serviceType, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Your EKOs unique cell number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Unique code of the user on the platform" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Value of customer's mobile number who wants the cash" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "customer_id", required = true) Integer customerId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Refer API Docs" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "bank_code", required = true) String bankCode, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Amount or 0 for Bal" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "amount", required = true) Integer amount, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Unique transaction ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "client_ref_id", required = true) String clientRefId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Default Value= 0" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "pipe", required = true) Integer pipe, @NotNull @Parameter(in = ParameterIn.QUERY, description = "1- SMS, Default- 0" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "notify_customer", required = true) String notifyCustomer, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Encrypted AADHAR number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "aadhar", required = true) String aadhar, @NotNull @Parameter(in = ParameterIn.QUERY, description = "PID Data of the biometric device" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "piddata", required = true) String piddata, @NotNull @Parameter(in = ParameterIn.QUERY, description = "latlon of requesting user" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "latlong", required = true) String latlong, @NotNull @Parameter(in = ParameterIn.QUERY, description = "IP of merchant" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "real_source_ip", required = true) String realSourceIp, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp, @Parameter(in = ParameterIn.HEADER, description = "Refer to API Docs" ,required=true,schema=@Schema()) @RequestHeader(value="request_hash", required=true) String requestHash);


    @Operation(summary = "Get Bank Details", description = "", tags={ "Banks API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20034.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/banks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse20034> v2BanksGet(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "bank_code", required = true) String bankCode, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The unique cell number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The unique cell number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "ifsc", required = false) String ifsc);


    @Operation(summary = "Get Customer Information", description = "", tags={ "Partner Account API" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20035.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/customers/{customer_id_type}:{customer_id}/balance",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse20035> v2CustomersCustomerIdTypecustomerIdBalanceGet(@Parameter(in = ParameterIn.PATH, description = "Mobile Number", required=true, schema=@Schema()) @PathVariable("customer_id_type") String customerIdType, @Parameter(in = ParameterIn.PATH, description = "Value of customer's mobile number", required=true, schema=@Schema()) @PathVariable("customer_id") String customerId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "partner id from where the request has been initiated" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp);


    @Operation(summary = "Get Customer Information", description = "", tags={ "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20012.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/customers/{customer_id_type}:{customer_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse20012> v2CustomersCustomerIdTypecustomerIdGet(@Parameter(in = ParameterIn.PATH, description = "Mobile Number", required=true, schema=@Schema()) @PathVariable("customer_id_type") String customerIdType, @Parameter(in = ParameterIn.PATH, description = "Value of customer's mobile number", required=true, schema=@Schema()) @PathVariable("customer_id") String customerId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "partner id from where the request has been initiated" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "User code value of the retailer from whom the requet is coming" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp);


    @Operation(summary = "Get Customer Information", description = "", tags={ "Customer KYC" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20012.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/customers/ {customer_id_type}:{customer_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse20012> v2CustomersCustomerIdTypecustomerIdGet(@Parameter(in = ParameterIn.PATH, description = "Mobile Number", required=true, schema=@Schema()) @PathVariable("customer_id_type") String customerIdType, @Parameter(in = ParameterIn.PATH, description = "Value of customer's mobile number", required=true, schema=@Schema()) @PathVariable("customer_id") String customerId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "partner id from where the request has been initiated" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "share code set by customer on the uidai website" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "aadhaar_xml_password", required = true) String aadhaarXmlPassword, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Refer the docs" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "ovd_type_id", required = true) Integer ovdTypeId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "OVD (other valid documents) proof number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "ovd_number", required = true) String ovdNumber, @NotNull @Parameter(in = ParameterIn.QUERY, description = "value = 2" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "kyc_option", required = true) Integer kycOption, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Zip file downloaded" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "Zip_file", required = true) Resource zipFile, @NotNull @Parameter(in = ParameterIn.QUERY, description = "For AePS authentication" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "ovd_image", required = true) Resource ovdImage, @NotNull @Parameter(in = ParameterIn.QUERY, description = "User code value of the retailer" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp, @Parameter(in = ParameterIn.QUERY, description = "For AePS authentication" ,schema=@Schema()) @Valid @RequestParam(value = "ovd_image_back", required = false) Resource ovdImageBack, @Parameter(in = ParameterIn.QUERY, description = "zip file which has been downloaded from UIDAI" ,schema=@Schema()) @Valid @RequestParam(value = "file_name", required = false) Resource fileName, @Parameter(in = ParameterIn.QUERY, description = "If not passing PAN" ,schema=@Schema()) @Valid @RequestParam(value = "form_60", required = false) Resource form60);


    @Operation(summary = "Resend OTP", description = "", tags={ "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20015.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/customers/{customer_id_type}:{customer_id}/otp",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse20015> v2CustomersCustomerIdTypecustomerIdOtpPut(@Parameter(in = ParameterIn.PATH, description = "Mobile Number", required=true, schema=@Schema()) @PathVariable("customer_id_type") Integer customerIdType, @Parameter(in = ParameterIn.PATH, description = "Value of Mobile Number", required=true, schema=@Schema()) @PathVariable("customer_id") Integer customerId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "partner id from where the request has been initiated" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "User code value of the retailer from whom the requet is coming" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Default Value= 0" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "pipe", required = true) Integer pipe, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp);


    @Operation(summary = "Create Customer", description = "", tags={ "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20013.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/customers/{customer_id_type}:{customer_id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse20013> v2CustomersCustomerIdTypecustomerIdPut(@Parameter(in = ParameterIn.PATH, description = "Mobile Number", required=true, schema=@Schema()) @PathVariable("customer_id_type") String customerIdType, @Parameter(in = ParameterIn.PATH, description = "Value of customer's mobile number", required=true, schema=@Schema()) @PathVariable("customer_id") String customerId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Name of the customer as per id" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "name", required = true) String name, @NotNull @Parameter(in = ParameterIn.QUERY, description = "partner id from where the request has been initiated" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "User code value of the retailer from whom the requet is coming" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Default Value= 0" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "pipe", required = true) Integer pipe, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Date of Birth of user" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "dob", required = true) String dob, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Residence address of the user" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "residence_address", required = true) List<String> residenceAddress, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp);


    @Operation(summary = "Manual Customer KYC", description = "", tags={ "Customer KYC" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20016.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/customers/{customer_id_type}:{customer_id}/",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse20016> v2CustomersCustomerIdTypecustomerIdPut(@Parameter(in = ParameterIn.PATH, description = "Mobile Number", required=true, schema=@Schema()) @PathVariable("customer_id_type") Integer customerIdType, @Parameter(in = ParameterIn.PATH, description = "Value of Mobile Number", required=true, schema=@Schema()) @PathVariable("customer_id") Integer customerId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Name of customer as per id proof" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "name", required = true) String name, @NotNull @Parameter(in = ParameterIn.QUERY, description = "partner id from where the request has been initiated" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Refer to docs" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id_proof_type_id", required = true) Integer idProofTypeId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "ID Proof Number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id_proof", required = true) String idProof, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Refer to docs" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "ovd_type_id", required = true) Integer ovdTypeId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "OVD proof number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "ovd_number", required = true) String ovdNumber, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Front image of id proof" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "file1(front)", required = true) Resource file1Front, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Back image of id proof" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "file2(back)", required = true) Resource file2Back, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Photo of the Customer" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "customer_photo", required = true) Resource customerPhoto, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Image of OVD" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "ovd_image", required = true) Resource ovdImage, @NotNull @Parameter(in = ParameterIn.QUERY, description = "User code value of the retailer from whom the requet is coming" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Residence address of the user" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "residence_address", required = true) List<String> residenceAddress, @NotNull @Parameter(in = ParameterIn.QUERY, description = "DOB of customer in YYYY-MM-DD format" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "dob", required = true) String dob, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp, @Parameter(in = ParameterIn.QUERY, description = "Back of proof (other than PAN)" ,schema=@Schema()) @Valid @RequestParam(value = "ovd_image_back", required = false) Resource ovdImageBack, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "customer_name_as_id", required = false) String customerNameAsId, @Parameter(in = ParameterIn.QUERY, description = "If not passing PAN" ,schema=@Schema()) @Valid @RequestParam(value = "form_60", required = false) Resource form60);


    @Operation(summary = "Get list of recipients", description = "", tags={ "Recipients" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20018.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/customers/{customer_id_type}:{customer_id}/recipients",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse20018> v2CustomersCustomerIdTypecustomerIdRecipientsGet(@Parameter(in = ParameterIn.PATH, description = "Mobile Number", required=true, schema=@Schema()) @PathVariable("customer_id_type") Integer customerIdType, @Parameter(in = ParameterIn.PATH, description = "Value of Mobile Number", required=true, schema=@Schema()) @PathVariable("customer_id") Integer customerId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "partner id from where the request has been initiated" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "User code value of the retailer from whom the requet is coming" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Default Value= 0" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "pipe", required = true) Integer pipe, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp);


    @Operation(summary = "Get recipient details", description = "", tags={ "Recipients" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20019.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/customers/{customer_id_type}:{customer_id}/recipients/recipient_id:{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse20019> v2CustomersCustomerIdTypecustomerIdRecipientsRecipientIdidGet(@Parameter(in = ParameterIn.PATH, description = "Unique recipient ID", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.PATH, description = "Mobile Number", required=true, schema=@Schema()) @PathVariable("customer_id_type") String customerIdType, @Parameter(in = ParameterIn.PATH, description = "Value of Mobile Number", required=true, schema=@Schema()) @PathVariable("customer_id") String customerId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "For a India to Nepal remittance transaction" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "product", required = true) String product, @NotNull @Parameter(in = ParameterIn.QUERY, description = "partner id from where the request has been initiated" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "User code value of the retailer from whom the requet is coming" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Default Value= 0" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "pipe", required = true) Integer pipe, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp);


    @Operation(summary = "Get recipient details", description = "", tags={ "Recipients" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20020.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/customers/{customer_id_type}:{customer_id}/recipients/{recipients_id_type}:{id}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse20020> v2CustomersCustomerIdTypecustomerIdRecipientsRecipientsIdTypeidPost(@Parameter(in = ParameterIn.PATH, description = "Mobile Number", required=true, schema=@Schema()) @PathVariable("customer_id_type") String customerIdType, @Parameter(in = ParameterIn.PATH, description = "Value of Mobile Number", required=true, schema=@Schema()) @PathVariable("customer_id") Integer customerId, @Parameter(in = ParameterIn.PATH, description = "Refer to docs", required=true, schema=@Schema()) @PathVariable("recipients_id_type") Integer recipientsIdType, @Parameter(in = ParameterIn.PATH, description = "Unique recipient ID", required=true, schema=@Schema()) @PathVariable("id") String id, @NotNull @Parameter(in = ParameterIn.QUERY, description = "partner id from where the request has been initiated" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) Integer initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Unique ID for each bank" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "bank_id", required = true) String bankId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Name of the recipient" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "recipient_name", required = true) String recipientName, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "recipient_mobile", required = true) Integer recipientMobile, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "recipient_type", required = true) Integer recipientType, @NotNull @Parameter(in = ParameterIn.QUERY, description = "User code value of retailer" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp);


    @Operation(summary = "Name Change Verification", description = "", tags={ "Customer KYC" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20017.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/customers/{id_type}:{id}/product:changename/otp",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse20017> v2CustomersIdTypeidProductchangenameOtpPost(@Parameter(in = ParameterIn.PATH, description = "Fixed as mobile number", required=true, schema=@Schema()) @PathVariable("id_type") String idType, @Parameter(in = ParameterIn.PATH, description = "Mobile number of customer", required=true, schema=@Schema()) @PathVariable("id") Integer id, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Unique Cell Number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "User code value of the retailer" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=false) String secretKeyTimestamp);


    @Operation(summary = "Name Change Verification", description = "", tags={ "Customer KYC" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20016.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/customers/product:changename/verification/otp:{otp}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse20016> v2CustomersProductchangenameVerificationOtpotpPut(@Parameter(in = ParameterIn.PATH, description = "OTP received on customer mobile", required=true, schema=@Schema()) @PathVariable("otp") Integer otp, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Unique Cell Number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Fixed as mobile number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id_type", required = true) String idType, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Mobile number of customer" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) Integer id, @NotNull @Parameter(in = ParameterIn.QUERY, description = "User code value of the retailer" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=false) String secretKeyTimestamp);


    @Operation(summary = "Verify Customer Identity", description = "", tags={ "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20014.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/customers/verification/otp:{otp}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse20014> v2CustomersVerificationOtpotpPut(@Parameter(in = ParameterIn.PATH, description = "Mobile Number", required=true, schema=@Schema()) @PathVariable("otp") Integer otp, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "customer_id_type", required = true) String customerIdType, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Value of customer's mobile number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "customer_id", required = true) Integer customerId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "partner id from where the request has been initiated" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "User code value of the retailer from whom the requet is coming" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Default Value= 0" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "pipe", required = true) Integer pipe, @NotNull @Parameter(in = ParameterIn.QUERY, description = "value of otp_ref_id received in response of create customer API" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "otp_ref_id", required = true) String otpRefId, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp);


    @Operation(summary = "Resend Transaction OTP", description = "", tags={ "Transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20023.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/transactions/{batch_id}/otp",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse20023> v2TransactionsBatchIdOtpPost(@Parameter(in = ParameterIn.PATH, description = "Batch id received in the response of Initiate Transaction", required=true, schema=@Schema()) @PathVariable("batch_id") Integer batchId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Your EKOs unique cell number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Unique code of the user on the platform" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp);


    @Operation(summary = "Get recipient details", description = "", tags={ "Transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20022.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/transactions/{batch_id}/verify",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse20022> v2TransactionsBatchIdVerifyPut(@Parameter(in = ParameterIn.PATH, description = "Batch id received in the response of initiate Transaction API", required=true, schema=@Schema()) @PathVariable("batch_id") Integer batchId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "OTP received on the customer mobile number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "otp", required = true) Integer otp, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Refer to docs" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "User code value of retailer" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp);


    @Operation(summary = "Transaction Inquiry", description = "", tags={ "Transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20024.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/transactions/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse20024> v2TransactionsIdGet(@Parameter(in = ParameterIn.PATH, description = "TID or client_ref_id", required=true, schema=@Schema()) @PathVariable("id") String id, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Your EKOs unique cell number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Unique code of the user on the platform" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp);


    @Operation(summary = "Refund", description = "", tags={ "Transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20026.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/transactions/{id}/refund/otp",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse20026> v2TransactionsIdRefundOtpPost(@Parameter(in = ParameterIn.PATH, description = "Eko tid or partner's unique reference id", required=true, schema=@Schema()) @PathVariable("id") String id, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Unique code of the user on the platform" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp);


    @Operation(summary = "Initiate Transactions", description = "", tags={ "Transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20021.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/transactions",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse20021> v2TransactionsPost(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "recipient_id", required = true) Integer recipientId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "amount", required = true) Integer amount, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Refer to docs" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "timestamp", required = true) String timestamp, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "currency", required = true) String currency, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "customer_id", required = true) Integer customerId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The unique cell number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) Integer initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Unique reference number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "client_ref_id", required = true) String clientRefId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "1 - Commit, 2- Hold" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "state", required = true) Integer state, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "channel", required = true) Integer channel, @NotNull @Parameter(in = ParameterIn.QUERY, description = "User code value of the retailer" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "latlong", required = false) String latlong);


    @Operation(summary = "Refund", description = "", tags={ "Transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse20025.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/v2/transactions/{tid}/refund",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse20025> v2TransactionsTidRefundPost(@Parameter(in = ParameterIn.PATH, description = "Eko tid or partner's unique reference id", required=true, schema=@Schema()) @PathVariable("tid") String tid, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "initiator_id", required = true) String initiatorId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "OTP shared with customer on the registered mobile number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "otp", required = true) Integer otp, @NotNull @Parameter(in = ParameterIn.QUERY, description = "current status of the transaction; 1 denotes \"commit\"" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "state", required = true) Integer state, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Unique code of the user on the platform" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "user_code", required = true) String userCode, @Parameter(in = ParameterIn.HEADER, description = "Your unique API key" ,required=true,schema=@Schema()) @RequestHeader(value="developer_key", required=true) String developerKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key", required=true) String secretKey, @Parameter(in = ParameterIn.HEADER, description = "Please refer to authentication section [https://developers.eko.in/docs/authentication]" ,required=true,schema=@Schema()) @RequestHeader(value="secret_key_timestamp", required=true) String secretKeyTimestamp);

}

